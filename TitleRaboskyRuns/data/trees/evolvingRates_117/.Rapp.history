dir()
regimeSummary <- read.csv('~/Dropbox/tipRatesProject/regimeSummary.csv', stringsAsFactors=FALSE)
file.choose()
regimeSummary <- read.csv('regimeSummary.csv', stringsAsFactors=FALSE)
head(regimeSummary)
rr <- lm(tipNetDiv ~ tipLambda, data = regimeSummary)
rr
summary(rr)
head(regimeSummary)
cor.test(rr$resid, regimeSummary$lambdaDR)
cor.test(rr$resid, regimeSummary$netDivBAMM)
plot(regimeSummary$tipLambda ~ regimeSummary$tipNetDiv)
cor.test(regimeSummary$tipNetDiv, regimeSummary$netDivBAMM)
cor.test(regimeSummary$tipNetDiv, regimeSummary$lambdaDR
)
cor.test(regimeSummary$tipLambda, regimeSummary$lambdaDR)
cor.test(regimeSummary$tipLambda, regimeSummary$lambdaBAMM)
head(regimeSummary)
xx <- regimeSummary[regimeSummary$nTips >= 10, ]
dim(xx)
cor.test(xx$tipLambda, xx$lambdaBAMM)
cor.test(xx$tipLambda, xx$lambdaDR)
cor.test(xx$tipNetDiv, xx$lambdaDR)
cor.test(xx$tipNetDiv, xx$lambdaBAMM)
cor.test(xx$tipNetDiv, xx$netDIvBAMM)
cor.test(xx$tipNetDiv, xx$netDivBAMM)
quit()
dat <- read.csv('~/Dropbox/tipRatesProject/rateErrorMetrics.csv', stringsAsFactors=FALSE)#
#
# set infinite values to NA#
for (i in 6:ncol(dat)) {#
	if (length(which(!is.finite(dat[,i]))) > 0) {#
		dat[which(!is.finite(dat[,i])), i] <- NA#
	}#
}
require(vioplot)
dat2 <- dat[which(dat$setname %in% c('MooreEtAl2016','RaboskyEtAl2017','fossilBAMM','MeyerWiens2017')),]#
#
datSplit <- split(dat2, dat2$nRegimes)#
#
# collapse shift number >= 10 into same category#
datSplit2 <- datSplit#
datSplit <- datSplit2[as.character(1:10)]#
datSplit[['10']] <- do.call(rbind, datSplit2[which(names(datSplit2) == '10'):length(datSplit2)])
par(mfrow=c(1,5))
i<-1
tipMetric <- rateMetrics[i]
rateMetrics <- c('CRBDlambda', 'lambdaTB', 'lambdaND', 'lambdaDR', 'lambdaBAMM')
errorMetricNames <- c(PE1='Prop. Error 1', PE2='Prop. Error 2', PE3='Prop. Error 3', PE4='Prop. 4', r2='OLS R2', slope='OLS slope', absoluteError='mean absolute error')
tipMetric <- rateMetrics[i]
errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))
rateType='tipLambda'
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))
errorMetric <- 'absoluteError'
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))
errorCol
plot.new()
yrange <- c(-0.2, 0.2)
plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)
axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))
axis(2)
?vioplot
vioplot(datSplit[[1]], at = 1)
vioplot(datSplit[[1]][, errorCol], at = 1)
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)
vioplot(datSplit[[1]][, errorCol], at = 1, add=TRUE)
par(mfrow=c(1,5))
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	vioplot(datSplit[[1]][, errorCol], at = 1, add=TRUE, drawRect=FALSE)
par(mfrow=c(1,5))
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		vioplot(datSplit[[i]][, errorCol], at = i, add=TRUE, drawRect=FALSE)#
	}
par(mfrow=c(1,5))
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		vioplot(datSplit[[j]][, errorCol], at = j, add=TRUE, drawRect=FALSE)#
	}
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)
vioplot(datSplit[[j]][, errorCol], at = j, add=TRUE, drawRect=FALSE)
vioplot(datSplit[[j]][, errorCol], at = j, add=TRUE, drawRect=FALSE, rectCol = NA)
par(mfrow=c(1,5))
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)
vioplot(datSplit[[j]][, errorCol], at = j, add=TRUE, drawRect=FALSE, rectCol = NA)
vioplot
par(mfrow=c(1,5))
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		vioplot(datSplit[[j]][, errorCol], at = j, add=TRUE, drawRect=FALSE, rectCol = NA)#
	}
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		vioplot(datSplit[[j]][, errorCol], at = j, add=TRUE, drawRect=FALSE, rectCol = NA, wex=0.5)#
	}
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		vioplot(datSplit[[j]][, errorCol], at = j, add=TRUE, drawRect=FALSE, rectCol = NA, wex=0.75)#
	}
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		vioplot(datSplit[[j]][, errorCol], at = j, add=TRUE, drawRect=FALSE, rectCol = NA, wex=0.75, col='black')#
	}
par(mfrow=c(1,5))
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		vioplot(datSplit[[j]][, errorCol], at = j, add=TRUE, drawRect=FALSE, rectCol = NA, wex=0.75, col='white')#
	}
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		vioplot(datSplit[[j]][, errorCol], at = j, add=TRUE, drawRect=FALSE, rectCol = NA, wex=0.75, col=gray(0.8))#
	}
par(mfrow=c(1,5))#
#
for (i in 1:5) {#
	tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		vioplot(datSplit[[j]][, errorCol], at = j, add=TRUE, drawRect=FALSE, rectCol = NA, wex=0.75, col=gray(0.8))#
	}#
#
}
par(mfrow=c(1,5))#
#
for (i in 1:5) {#
	tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		vioplot(datSplit[[j]][, errorCol], at = j, add=TRUE, drawRect=FALSE, rectCol = NA, wex=0.75, col=gray(0.8), range= 1)#
	}#
#
}
par(mfrow=c(1,5))#
#
for (i in 1:5) {#
	tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		vioplot(datSplit[[j]][, errorCol], at = j, add=TRUE, drawRect=FALSE, rectCol = NA, wex=0.75, col=gray(0.8), range= 0.5)#
	}#
#
}
?boxplot
i<-1
par(mfrow=c(1,5))
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)
boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8))
par(mfrow=c(1,5))#
#
for (i in 1:5) {#
	tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8), border='blue')#
	}#
#
}
?par
par(mfrow=c(1,5))#
#
for (i in 1:5) {#
	tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8), bty='n')#
	}#
#
}
par(mfrow=c(1,5))#
#
for (i in 1:5) {#
	tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8), bty='n', outline=F)#
	}#
#
}
par(mfrow=c(1,5))#
#
for (i in 1:5) {#
	tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8), bty='n', outline=F)#
	}#
	abline(h=0, lty=3)#
#
}
par(mfrow=c(1,5))#
#
for (i in 1:5) {#
	tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8), bty='u', outline=F)#
	}#
	abline(h=0, lty=3)#
#
}
par(mfrow=c(1,5))#
#
for (i in 1:5) {#
	tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8), bty='n', outline=F, drawRect=F)#
	}#
	abline(h=0, lty=3)#
#
}
?par
tmp <- boxplot(datSplit[[j]][, errorCol], at = j, wex=0.75, plot=F)
tmp
boxplot(datSplit[[j]][, errorCol], plot=F)
tmp <- boxplot(datSplit[[j]][, errorCol], plot=F)
par(mfrow=c(1,5))
i<-1
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)
j<-1
tmp <- boxplot(datSplit[[j]][, errorCol], plot=F)
rect(tmp$stats[1,2], tmp$stats[4,2])
tmp$stats[1,2]
tmp
tmp$stats
rect(tmp$stats[1,1], tmp$stats[4,1])
tmp$stats[1,1]
width <- 0.2
rect(j - width/2, tmp$stats[1,1], j + width/2, tmp$stats[4,1])
width=0.4
rect(j - width/2, tmp$stats[1,1], j + width/2, tmp$stats[4,1])
par(mfrow=c(1,5))
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)
tmp <- boxplot(datSplit[[j]][, errorCol], plot=F)
rect(j - width/2, tmp$stats[1,1], j + width/2, tmp$stats[4,1], col=gray(0.75))
segments(j, tmp$stats[2,1], j, tmp$stats[4,1], lty=2)
segments(j, tmp$stats[1,1], j, tmp$stats[2,1], lty=2)
par(mfrow=c(1,5))
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)
tmp <- boxplot(datSplit[[j]][, errorCol], plot=F)
rect(j - width/2, tmp$stats[2,1], j + width/2, tmp$stats[4,1], col=gray(0.75))
segments(j, tmp$stats[1,1], j, tmp$stats[2,1], lty=2)
segments(j, tmp$stats[4,1], j, tmp$stats[5,1], lty=2)
arrows(j, tmp$stats[1,1], j, tmp$stats[2,1], lty=2, angle=90, length=0.1)
arrows(j, tmp$stats[2,1], j, tmp$stats[1,1], lty=2, angle=90, length=0.05)
segments(j - width/2, tmp$stats[1,1], j + width/2, tmp$stats[1,1])
par(mfrow=c(1,5))
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)
tmp <- boxplot(datSplit[[j]][, errorCol], plot=F)#
		rect(j - width/2, tmp$stats[2,1], j + width/2, tmp$stats[4,1], col=gray(0.75))#
		segments(j, tmp$stats[1,1], j, tmp$stats[2,1], lty=2)#
		segments(j, tmp$stats[4,1], j, tmp$stats[5,1], lty=2)#
		segments(j - width/2, tmp$stats[1,1], j + width/2, tmp$stats[1,1])#
		segments(j - width/2, tmp$stats[4,1], j + width/2, tmp$stats[4,1])
segments(j - width/2, tmp$stats[5,1], j + width/2, tmp$stats[5,1])
segments(j - width/2, tmp$stats[3,1], j + width/2, tmp$stats[3,1], lwd=2)
par(mfrow=c(1,5))
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		tmp <- boxplot(datSplit[[j]][, errorCol], plot=F)#
		rect(j - width/2, tmp$stats[2,1], j + width/2, tmp$stats[4,1], col=gray(0.75))#
		segments(j, tmp$stats[1,1], j, tmp$stats[2,1], lty=2)#
		segments(j, tmp$stats[4,1], j, tmp$stats[5,1], lty=2)#
		segments(j - width/2, tmp$stats[1,1], j + width/2, tmp$stats[1,1])#
		segments(j - width/2, tmp$stats[5,1], j + width/2, tmp$stats[5,1])#
		segments(j - width/2, tmp$stats[3,1], j + width/2, tmp$stats[3,1], lwd=2)#
		# boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8), bty='n', outline=F)#
	}#
	abline(h=0, lty=3)
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)
for (j in 1:length(datSplit)) {#
		# tmp <- boxplot(datSplit[[j]][, errorCol], plot=F)#
		# rect(j - width/2, tmp$stats[2,1], j + width/2, tmp$stats[4,1], col=gray(0.75))#
		# segments(j, tmp$stats[1,1], j, tmp$stats[2,1], lty=2)#
		# segments(j, tmp$stats[4,1], j, tmp$stats[5,1], lty=2)#
		# segments(j - width/2, tmp$stats[1,1], j + width/2, tmp$stats[1,1])#
		# segments(j - width/2, tmp$stats[5,1], j + width/2, tmp$stats[5,1])#
		# segments(j - width/2, tmp$stats[3,1], j + width/2, tmp$stats[3,1], lwd=2)#
		boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8), bty='n', outline=F)#
	}
abline(h=0, lty=3)
tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		tmp <- boxplot(datSplit[[j]][, errorCol], plot=F)#
		rect(j - width/2, tmp$stats[2,1], j + width/2, tmp$stats[4,1], col=gray(0.75))#
		segments(j, tmp$stats[1,1], j, tmp$stats[2,1], lty=2)#
		segments(j, tmp$stats[4,1], j, tmp$stats[5,1], lty=2)#
		segments(j - width/2, tmp$stats[1,1], j + width/2, tmp$stats[1,1])#
		segments(j - width/3, tmp$stats[5,1], j + width/3, tmp$stats[5,1])#
		segments(j - width/3, tmp$stats[3,1], j + width/3, tmp$stats[3,1], lwd=1.5)#
		# boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8), bty='n', outline=F)#
	}
par(mfrow=c(1,5))#
#
width <- 0.4#
#
for (i in 1:5) {#
	tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		tmp <- boxplot(datSplit[[j]][, errorCol], plot=F)#
		rect(j - width/2, tmp$stats[2,1], j + width/2, tmp$stats[4,1], col=gray(0.75))#
		segments(j, tmp$stats[1,1], j, tmp$stats[2,1], lty=2)#
		segments(j, tmp$stats[4,1], j, tmp$stats[5,1], lty=2)#
		segments(j - width/2, tmp$stats[1,1], j + width/2, tmp$stats[1,1])#
		segments(j - width/3, tmp$stats[5,1], j + width/3, tmp$stats[5,1])#
		segments(j - width/3, tmp$stats[3,1], j + width/3, tmp$stats[3,1], lwd=2)#
		# boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8), bty='n', outline=F)#
	}#
	abline(h=0, lty=3)#
#
}
errorLabel
par(mfrow=c(1,5))#
#
width <- 0.4#
#
for (i in 1:5) {#
	tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		tmp <- boxplot(datSplit[[j]][, errorCol], plot=F)#
		rect(j - width/2, tmp$stats[2,1], j + width/2, tmp$stats[4,1], col=gray(0.75))#
		segments(j, tmp$stats[1,1], j, tmp$stats[2,1], lty=2)#
		segments(j, tmp$stats[4,1], j, tmp$stats[5,1], lty=2)#
		segments(j - width/2, tmp$stats[1,1], j + width/2, tmp$stats[1,1])#
		segments(j - width/3, tmp$stats[5,1], j + width/3, tmp$stats[5,1])#
		segments(j - width/3, tmp$stats[3,1], j + width/3, tmp$stats[3,1], lwd=2)#
		# boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8), bty='n', outline=F)#
	}#
	abline(h=0, lty=3)#
	mtext('nRegimes', side = 1, cex=0.5, line = 2)#
	mtext('mean absolute error', side = 2, cex=0.5, line = 2)#
	title(main = rateMetrics[i], line = -0.5)#
}#
mtext('multi-regime constant-rate', outer=TRUE, line = -2)#
#
}
par(mfrow=c(1,5))#
#
width <- 0.4#
yrange <- c(-0.15, 0.15)#
#
for (i in 1:5) {#
	tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		tmp <- boxplot(datSplit[[j]][, errorCol], plot=F)#
		rect(j - width/2, tmp$stats[2,1], j + width/2, tmp$stats[4,1], col=gray(0.75))#
		segments(j, tmp$stats[1,1], j, tmp$stats[2,1], lty=2)#
		segments(j, tmp$stats[4,1], j, tmp$stats[5,1], lty=2)#
		segments(j - width/2, tmp$stats[1,1], j + width/2, tmp$stats[1,1])#
		segments(j - width/3, tmp$stats[5,1], j + width/3, tmp$stats[5,1])#
		segments(j - width/3, tmp$stats[3,1], j + width/3, tmp$stats[3,1], lwd=2)#
		# boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8), bty='n', outline=F)#
	}#
	abline(h=0, lty=3)#
	mtext('nRegimes', side = 1, cex=0.5, line = 2)#
	mtext('mean absolute error', side = 2, cex=0.5, line = 2)#
	title(main = rateMetrics[i], line = -0.5)#
}#
mtext('multi-regime constant-rate', outer=TRUE, line = -2)#
#
}
pdf('~/Dropbox/tipRatesProject/preliminaryplots/errorAcrossRegimeNum_absoluteError2.pdf', width=10, height=3)#
par(mfrow=c(1,5))#
#
width <- 0.4#
yrange <- c(-0.15, 0.15)#
#
for (i in 1:5) {#
	tipMetric <- rateMetrics[i]#
	errorCol <- Reduce(intersect, list(grep(rateType, colnames(dat)), grep(rateMetrics[i], colnames(dat)), grep(errorMetric, colnames(dat))))#
	plot.new()#
	plot.window(xlim = c(range(as.numeric(names(datSplit)))), ylim = yrange)#
	axis(1, at = as.numeric(names(datSplit)), labels = names(datSplit))#
	axis(2)#
	for (j in 1:length(datSplit)) {#
		tmp <- boxplot(datSplit[[j]][, errorCol], plot=F)#
		rect(j - width/2, tmp$stats[2,1], j + width/2, tmp$stats[4,1], col=gray(0.75))#
		segments(j, tmp$stats[1,1], j, tmp$stats[2,1], lty=2)#
		segments(j, tmp$stats[4,1], j, tmp$stats[5,1], lty=2)#
		segments(j - width/2, tmp$stats[1,1], j + width/2, tmp$stats[1,1])#
		segments(j - width/3, tmp$stats[5,1], j + width/3, tmp$stats[5,1])#
		segments(j - width/3, tmp$stats[3,1], j + width/3, tmp$stats[3,1], lwd=2)#
		# boxplot(datSplit[[j]][, errorCol], at = j, add=TRUE, wex=0.75, col=gray(0.8), bty='n', outline=F)#
	}#
	abline(h=0, lty=3)#
	mtext('nRegimes', side = 1, cex=0.5, line = 2)#
	mtext('mean absolute error', side = 2, cex=0.5, line = 2)#
	title(main = rateMetrics[i], line = -0.5)#
}#
mtext('multi-regime constant-rate', outer=TRUE, line = -2)#
dev.off()
Lambda <- 0.2#
#
treeList <- vector('list', 100)#
for (i in 1:100) {#
	cat(i, '\n')#
	Eps <- runif(1, 0.5, 1)#
	Mu <- Eps * Lambda#
	treeList[[i]] <- sim.bd.taxa(100, 1, Lambda, Mu, complete=FALSE)[[1]]#
}
require(TreeSim)
Lambda <- 0.2#
#
treeList <- vector('list', 100)#
for (i in 1:100) {#
	cat(i, '\n')#
	Eps <- runif(1, 0.5, 1)#
	Mu <- Eps * Lambda#
	treeList[[i]] <- sim.bd.taxa(100, 1, Lambda, Mu, complete=FALSE)[[1]]#
}
treeList <- vector('list', 100)#
trueparams <- as.data.frame(matrix(nrow=100, ncol = 2))#
colnames(trueparams) <- c('lambda','mu')#
trueparams[,1] <- Lambda
for (i in 1:100) {#
	cat(i, '\n')#
	Eps <- runif(1, 0.5, 1)#
	Mu <- Eps * Lambda#
	treeList[[i]] <- sim.bd.taxa(100, 1, Lambda, Mu, complete=FALSE)[[1]]#
}
trueparams
treeList <- vector('list', 100)#
trueparams <- as.data.frame(matrix(nrow=100, ncol = 2))#
colnames(trueparams) <- c('lambda','mu')#
trueparams[,1] <- Lambda#
#
for (i in 1:100) {#
	cat(i, '\n')#
	Eps <- runif(1, 0.5, 1)#
	Mu <- Eps * Lambda#
	trueparams[i,2] <- Mu#
	treeList[[i]] <- sim.bd.taxa(100, 1, Lambda, Mu, complete=FALSE)[[1]]#
}
trueparams
source('~/Dropbox/tipRatesProject/tipRateFunctions.R')
ls()
dr <- lapply(treeList, function(x) DRstat(x))
meanDR <- sapply(dr, mean)
plot(Lambda - trueparams[,2], meanDR)
plot(Lambda - trueparams[,2], meanDR, xlim = c(0, 0.35), ylim = c(0, 0.35))
require(ppcor)#
require(AICcmodavg)#
#
regimeSummary <- read.csv('~/Dropbox/tipRatesProject/regimeSummary.csv', stringsAsFactors=FALSE)
summary(lm(lambdaDR ~ tipLambda, data = regimeSummary))#
summary(lm(lambdaDR ~ tipNetDiv, data = regimeSummary))
fit1 <- lm(lambdaDR ~ tipLambda, data = regimeSummary)#
fit2 <- lm(lambdaDR ~ tipNetDiv, data = regimeSummary)#
#
aictab(list(lambda=fit1, netdiv=fit2))
allRatesList <- readRDS('~/Dropbox/tipRatesProject/allRatesList.rds')
qq <- do.call(rbind, qq)
qq <- do.call(rbind, allRatesList)
unique(qq$setname)
unique(regimeSummary$setname)
qq <- qq[which(qq$setname %in% unique(regimeSummary$setname)),]
head(qq)
fit1 <- lm(lambdaDR ~ tipLambda, data = qq)
fit2 <- lm(lambdaDR ~ tipNetDiv, data = qq)
aictab(list(lambda=fit1, netdiv=fit2))
summary(fit1)
summary(fit2)
summary(lm(lambdaDR ~ tipLambda + tipNetDiv, data = qq))
require(coda)#
source('~/Dropbox/tipRatesProject/sourceFxns.R')
path <- '~/Dropbox/tipRatesProject/trees/'
setnames <- c('highTurnoverBD', 'LambdaEqualsMu', 'evolvingRates', 'MeyerWiens2017')
i<-3
folders <- list.files(path, pattern = setnames[i])#
	folders <- folders[order(as.numeric(gsub(paste0(setnames[i], '_'), '', folders)))]
head(folders)
setTable <- as.data.frame(matrix(nrow = length(folders), ncol = 5))
colnames(setTable) <- colnames(summaryTable)
summaryTable <- as.data.frame(matrix(nrow = 0, ncol = 5))
colnames(summaryTable) <- c('treeName', 'loglik_effectiveSize', 'nShifts_effectiveSize', 'loglik_geweke', 'nShifts_geweke')
colnames(setTable) <- colnames(summaryTable)
setTable$treeName <- folders
for (j in 1:length(folders)) {#
		setwd(paste0(path, folders[j]))#
		setTable[j, 2:5] <- checkBAMMconvergence()#
	}
head(setTable)
tail(setTable)
table(setTable[,2] > 200)
table(setTable[,3] > 200)
table(setTable[,4] > -2 & setTable[,4] < 2)
which(setTable[,2] < 200)
i<-117
j<-117
setwd(paste0(path, folders[j]))
checkBAMMconvergence()
checkBAMMconvergence(burnin=0.3)
checkBAMMconvergence(burnin=0.2)
source('~/Dropbox/tipRatesProject/sourceFxns.R')
checkBAMMconvergence(burnin=0.2)
checkBAMMconvergence
checkBAMMconvergence(burnin=0.5)
